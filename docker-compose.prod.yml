version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vitrine-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/sites:/etc/nginx/sites-enabled:ro
      - ./infrastructure/ssl:/etc/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - backend
    networks:
      - vitrine-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: vitrine-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3333
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: vitrine_digital_prod
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
      CLOUDFLARE_ZONE_ID: ${CLOUDFLARE_ZONE_ID}
      BLING_CLIENT_ID: ${BLING_CLIENT_ID}
      BLING_CLIENT_SECRET: ${BLING_CLIENT_SECRET}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - vitrine-network

  # Frontend (Static Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: vitrine-frontend
    restart: unless-stopped
    volumes:
      - frontend-dist:/usr/share/nginx/html
    networks:
      - vitrine-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vitrine-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vitrine_digital_prod
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - vitrine-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vitrine-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - vitrine-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: vitrine-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - vitrine-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vitrine-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./infrastructure/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - vitrine-network

networks:
  vitrine-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  frontend-dist:
    driver: local