import React, { useState, useEffect } from 'react';

/**
 * Super Admin Dashboard - Painel para controle global da plataforma
 * Para o dono da plataforma (HUB360PLUS) gerenciar todos fornecedores e assinaturas
 */
const SuperAdmin = () => {
  const [metrics, setMetrics] = useState({});
  const [suppliers, setSuppliers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    company_name: '',
    document: '',
    state_registration: '',
    contact_person: '',
    address: '',
    plan: 'pro',
    client_type: 'supplier',
    services: {
      implantacao: false,
      erp_bling: false,
      crm: false,
      gestao_marketplaces: false
    }
  });
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    loadDashboardData();
    loadSuppliers(); // Carrega fornecedores automaticamente
  }, []);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/super-admin/metrics');
      const data = await response.json();
      
      if (data.success) {
        setMetrics(data.metrics);
      }
    } catch (error) {
      console.error('Erro ao carregar métricas:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadSuppliers = async () => {
    try {
      const response = await fetch('/api/super-admin/suppliers');
      const data = await response.json();
      
      if (data.success) {
        setSuppliers(data.data);
      }
    } catch (error) {
      console.error('Erro ao carregar fornecedores:', error);
    }
  };

  const generateNFe = async (subscriptionId) => {
    try {
      const response = await fetch(`/api/super-admin/nfe/${subscriptionId}`, {
        method: 'POST'
      });
      const data = await response.json();
      
      if (data.success) {
        alert('NFe de serviço gerada com sucesso!');
      }
    } catch (error) {
      console.error('Erro ao gerar NFe:', error);
      alert('Erro ao gerar NFe de serviço');
    }
  };

  const toggleSupplierStatus = async (supplierId, action) => {
    const reason = prompt('Motivo da ação:');
    if (!reason) return;

    try {
      const response = await fetch(`/api/super-admin/suppliers/${supplierId}/status`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action, reason })
      });
      
      const data = await response.json();
      
      if (data.success) {
        alert(data.message);
        loadSuppliers();
      }
    } catch (error) {
      console.error('Erro ao alterar status:', error);
      alert('Erro ao alterar status do fornecedor');
    }
  };

  const formatPrice = (value) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('pt-BR');
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleServiceChange = (e) => {
    const { name, checked } = e.target;
    const serviceName = name.split('.')[1]; // Remove 'services.' prefix
    setFormData(prev => ({
      ...prev,
      services: {
        ...prev.services,
        [serviceName]: checked
      }
    }));
  };

  const handleSubmitSupplier = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    
    try {
      const response = await fetch('/api/super-admin/suppliers', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });
      
      const data = await response.json();
      
      if (data.success) {
        alert('Cliente cadastrado com sucesso!');
        setFormData({
          name: '',
          email: '',
          domain: '',
          phone: '',
          cnpj: '',
          address: '',
          plan_id: ''
        });
        setActiveTab('suppliers');
        loadSuppliers();
        loadDashboardData();
      } else {
        alert('Erro ao cadastrar cliente: ' + data.message);
      }
    } catch (error) {
      console.error('Erro ao cadastrar fornecedor:', error);
      alert('Erro ao cadastrar cliente');
    } finally {
      setSubmitting(false);
    }
  };

  const renderRetailers = () => (
    <div className="card">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">
          <i className="fas fa-store me-2"></i>
          Lojistas da Plataforma
        </h5>
        <button 
          className="btn btn-primary btn-sm"
          onClick={() => setActiveTab('cadastro')}
        >
          <i className="fas fa-plus me-1"></i>
          Novo Cliente
        </button>
      </div>
      <div className="card-body">
        <div className="alert alert-info">
          <i className="fas fa-info-circle me-2"></i>
          Funcionalidade de lojistas em desenvolvimento.
        </div>
      </div>
    </div>
  );

  const renderCadastroForm = () => (
    <div className="card">
      <div className="card-header">
        <h5 className="mb-0">
          <i className="fas fa-plus me-2"></i>
          Cadastrar Novo Cliente
        </h5>
      </div>
      <div className="card-body">
        <form onSubmit={handleSubmitSupplier}>
          {/* Tipo de Cliente */}
          <div className="row mb-3">
            <div className="col-12">
              <label className="form-label fw-bold">Tipo de Cliente *</label>
              <div className="d-flex gap-4">
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="client_type"
                    id="supplier"
                    value="supplier"
                    checked={formData.client_type === 'supplier'}
                    onChange={handleInputChange}
                  />
                  <label className="form-check-label" htmlFor="supplier">
                    <i className="fas fa-building me-2"></i>Fornecedor
                  </label>
                </div>
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="client_type"
                    id="retailer"
                    value="retailer"
                    checked={formData.client_type === 'retailer'}
                    onChange={handleInputChange}
                  />
                  <label className="form-check-label" htmlFor="retailer">
                    <i className="fas fa-store me-2"></i>Lojista
                  </label>
                </div>
              </div>
            </div>
          </div>

          <div className="row">
            <div className="col-md-6 mb-3">
              <label htmlFor="name" className="form-label">Nome da Empresa *</label>
              <input
                type="text"
                className="form-control"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="col-md-6 mb-3">
              <label htmlFor="email" className="form-label">Email *</label>
              <input
                type="email"
                className="form-control"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                required
              />
            </div>
          </div>
          
          <div className="row">
            <div className="col-md-6 mb-3">
              <label htmlFor="company_name" className="form-label">Razão Social</label>
              <input
                type="text"
                className="form-control"
                id="company_name"
                name="company_name"
                value={formData.company_name}
                onChange={handleInputChange}
                placeholder="Nome Completo da Empresa Ltda"
              />
            </div>
            <div className="col-md-6 mb-3">
              <label htmlFor="contact_person" className="form-label">Contato *</label>
              <input
                type="text"
                className="form-control"
                id="contact_person"
                name="contact_person"
                value={formData.contact_person}
                onChange={handleInputChange}
                placeholder="Nome do responsável"
                required
              />
            </div>
          </div>
          
          <div className="row">
            <div className="col-md-4 mb-3">
              <label htmlFor="document" className="form-label">CNPJ</label>
              <input
                type="text"
                className="form-control"
                id="document"
                name="document"
                value={formData.document}
                onChange={handleInputChange}
                placeholder="00.000.000/0000-00"
              />
            </div>
            <div className="col-md-4 mb-3">
              <label htmlFor="state_registration" className="form-label">Inscrição Estadual</label>
              <input
                type="text"
                className="form-control"
                id="state_registration"
                name="state_registration"
                value={formData.state_registration}
                onChange={handleInputChange}
                placeholder="123.456.789.000"
              />
            </div>
            <div className="col-md-4 mb-3">
              <label htmlFor="phone" className="form-label">Telefone</label>
              <input
                type="tel"
                className="form-control"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                placeholder="(11) 99999-9999"
              />
            </div>
          </div>

          {/* Planos com Radio Buttons */}
          <div className="row mb-3">
            <div className="col-12">
              <label className="form-label fw-bold">Plano *</label>
              <div className="d-flex gap-4">
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="plan"
                    id="fornecedor_plan"
                    value="pro"
                    checked={formData.plan === 'pro'}
                    onChange={handleInputChange}
                  />
                  <label className="form-check-label" htmlFor="fornecedor_plan">
                    <i className="fas fa-building me-2"></i>Fornecedor - R$ 399/mês
                  </label>
                </div>
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="plan"
                    id="cliente_plan"
                    value="starter"
                    checked={formData.plan === 'starter'}
                    onChange={handleInputChange}
                  />
                  <label className="form-check-label" htmlFor="cliente_plan">
                    <i className="fas fa-store me-2"></i>Cliente - R$ 49/mês
                  </label>
                </div>
              </div>
            </div>
          </div>

          {/* Serviços Adicionais */}
          <div className="row mb-3">
            <div className="col-12">
              <label className="form-label fw-bold">Serviços Adicionais</label>
              <div className="row">
                <div className="col-md-6 mb-2">
                  <div className="form-check">
                    <input
                      className="form-check-input"
                      type="checkbox"
                      name="services.implantacao"
                      id="implantacao"
                      checked={formData.services.implantacao}
                      onChange={handleServiceChange}
                    />
                    <label className="form-check-label" htmlFor="implantacao">
                      <i className="fas fa-cogs me-2"></i>Implantação - R$ 599
                    </label>
                  </div>
                </div>
                <div className="col-md-6 mb-2">
                  <div className="form-check">
                    <input
                      className="form-check-input"
                      type="checkbox"
                      name="services.erp_bling"
                      id="erp_bling"
                      checked={formData.services.erp_bling}
                      onChange={handleServiceChange}
                    />
                    <label className="form-check-label" htmlFor="erp_bling">
                      <i className="fas fa-database me-2"></i>ERP Bling (Comissão 10%)
                    </label>
                  </div>
                </div>
                <div className="col-md-6 mb-2">
                  <div className="form-check">
                    <input
                      className="form-check-input"
                      type="checkbox"
                      name="services.crm"
                      id="crm"
                      checked={formData.services.crm}
                      onChange={handleServiceChange}
                    />
                    <label className="form-check-label" htmlFor="crm">
                      <i className="fas fa-users-cog me-2"></i>CRM (Comissão 30%)
                    </label>
                  </div>
                </div>
                <div className="col-md-6 mb-2">
                  <div className="form-check">
                    <input
                      className="form-check-input"
                      type="checkbox"
                      name="services.gestao_marketplaces"
                      id="gestao_marketplaces"
                      checked={formData.services.gestao_marketplaces}
                      onChange={handleServiceChange}
                    />
                    <label className="form-check-label" htmlFor="gestao_marketplaces">
                      <i className="fas fa-shopping-bag me-2"></i>Gestão Marketplaces - R$ 399/mês
                    </label>
                  </div>
                </div>
              </div>
              <small className="form-text text-muted">
                <i className="fas fa-store me-1"></i>
                Marketplaces: TikTok Shop, Amazon, Mercado Livre, Shopee, Magalu
              </small>
            </div>
          </div>
          
          <div className="mb-3">
            <label htmlFor="address" className="form-label">Endereço</label>
            <textarea
              className="form-control"
              id="address"
              name="address"
              value={formData.address}
              onChange={handleInputChange}
              rows={3}
              placeholder="Endereço completo"
            ></textarea>
          </div>
          
          <div className="d-flex gap-2">
            <button 
              type="submit" 
              className="btn btn-primary"
              disabled={submitting}
            >
              {submitting ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  Cadastrando...
                </>
              ) : (
                <>
                  <i className="fas fa-save me-2"></i>
                  Cadastrar Cliente
                </>
              )}
            </button>
            <button 
              type="button" 
              className="btn btn-secondary"
              onClick={() => setActiveTab('suppliers')}
            >
              <i className="fas fa-times me-2"></i>
              Cancelar
            </button>
          </div>
        </form>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="container-fluid py-5">
        <div className="text-center">
          <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Carregando...</span>
          </div>
          <p className="mt-3">Carregando dados da plataforma...</p>
        </div>
      </div>
    );
  }

  const renderDashboard = () => (
    <div className="row">
      {/* Cards de Métricas Principais */}
      <div className="col-12 mb-4">
        <div className="row">
          {/* MRR Total */}
          <div className="col-lg-6 col-md-6 mb-4">
            <div className="card bg-success text-white h-100">
              <div className="card-body">
                <div className="d-flex justify-content-between">
                  <div>
                    <h6 className="card-title">💰 MRR Total</h6>
                    <h3 className="mb-0">{formatPrice(metrics.revenue?.total_mrr || 0)}</h3>
                    <small>Receita mensal recorrente</small>
                  </div>
                  <div className="align-self-center">
                    <i className="fas fa-money-bill-wave fa-2x"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Clientes Total */}
          <div className="col-lg-6 col-md-6 mb-4">
            <div className="card bg-primary text-white h-100">
              <div className="card-body">
                <div className="d-flex justify-content-between">
                  <div>
                    <h6 className="card-title">👥 Total de Clientes</h6>
                    <h3 className="mb-0">{metrics.suppliers?.total || 0}</h3>
                    <small>{metrics.suppliers?.active || 0} ativos • {metrics.suppliers?.pending || 0} pendentes</small>
                  </div>
                  <div className="align-self-center">
                    <i className="fas fa-users fa-2x"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
              <div className="card-body">
                <div className="d-flex justify-content-between">
                  <div>
                    <h6 className="card-title">📦 Pedidos</h6>
                    <h3 className="mb-0">{metrics.orders?.total || 0}</h3>
                    <small>{formatPrice(metrics.orders?.total_revenue || 0)} em vendas</small>
                  </div>
                  <div className="align-self-center">
                    <i className="fas fa-box fa-2x"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Ações e Métricas */}
      <div className="col-12">
        <div className="card">
          <div className="card-header">
            <h5 className="mb-0">⚡ Ações Rápidas</h5>
          </div>
          <div className="card-body">
            <div className="d-grid gap-2">
              <button 
                className="btn btn-outline-primary"
                onClick={() => setActiveTab('suppliers')}
              >
                <i className="fas fa-users me-2"></i>
                Gerenciar Clientes ({metrics.suppliers?.total || 0})
              </button>
              <button 
                className="btn btn-outline-info"
                onClick={() => loadDashboardData()}
              >
                <i className="fas fa-sync-alt me-2"></i>
                Atualizar Dados
              </button>
            </div>
          </div>
        </div>
      </div>

    </div>
  );

  const renderSuppliers = () => (
    <div className="card">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">🏪 Fornecedores da Plataforma</h5>
        <button className="btn btn-primary btn-sm" onClick={loadSuppliers}>
          <i className="fas fa-sync-alt me-1"></i>
          Carregar
        </button>
      </div>
      <div className="card-body">
        <div className="table-responsive">
          <table className="table table-hover">
            <thead>
              <tr>
                <th>Cliente</th>
                <th>Domínio</th>
                <th>Status</th>
                <th>Status Bling</th>
                <th>Plano</th>
                <th>Valor</th>
                <th>Criado em</th>
                <th>Ações</th>
              </tr>
            </thead>
            <tbody>
              {suppliers.length === 0 ? (
                <tr>
                  <td colSpan="8" className="text-center py-4">
                    <div className="text-muted">
                      <i className="fas fa-store fa-2x mb-2"></i>
                      <p>Nenhum cliente cadastrado ainda</p>
                      <div className="mt-3">
                        <button 
                          className="btn btn-primary btn-sm" 
                          onClick={() => setActiveTab('cadastro')}
                        >
                          <i className="fas fa-plus me-1"></i>
                          Cadastrar Novo Cliente
                        </button>
                      </div>
                    </div>
                  </td>
                </tr>
              ) : (
                suppliers.map(supplier => (
                  <tr key={supplier.id}>
                    <td>
                      <div>
                        <strong>{supplier.name}</strong>
                        <br />
                        <small className="text-muted">{supplier.email}</small>
                      </div>
                    </td>
                    <td>
                      <span className="badge bg-info">{supplier.domain}</span>
                    </td>
                    <td>
                      <span className={`badge ${
                        supplier.tenant_status === 'active' ? 'bg-success' :
                        supplier.tenant_status === 'suspended' ? 'bg-danger' : 'bg-warning'
                      }`}>
                        {supplier.tenant_status === 'active' ? 'Ativo' : 
                         supplier.tenant_status === 'suspended' ? 'Bloqueado' : 'Pendente'}
                      </span>
                    </td>
                    <td>
                      <span className={`badge ${
                        supplier.bling_status === 'connected' ? 'bg-success' :
                        supplier.bling_status === 'error' ? 'bg-danger' : 'bg-warning'
                      }`}>
                        {supplier.bling_status === 'connected' ? '✓ Conectado' :
                         supplier.bling_status === 'error' ? '✗ Erro' : '⏳ Pendente'}
                      </span>
                    </td>
                    <td>{supplier.plan_name || 'Sem plano'}</td>
                    <td className="fw-bold text-success">
                      {formatPrice(supplier.plan_value || 0)}
                    </td>
                    <td>{formatDate(supplier.created_at)}</td>
                    <td>
                      <div className="btn-group btn-group-sm">
                        <button 
                          className="btn btn-outline-primary"
                          onClick={() => alert('Função de editar em desenvolvimento')}
                          title="Alterar dados do fornecedor"
                        >
                          <i className="fas fa-edit"></i>
                        </button>
                        {supplier.tenant_status === 'active' ? (
                          <button 
                            className="btn btn-outline-warning"
                            onClick={() => toggleSupplierStatus(supplier.id, 'suspend')}
                            title="Bloquear por falta de pagamento"
                          >
                            <i className="fas fa-ban"></i>
                          </button>
                        ) : (
                          <button 
                            className="btn btn-outline-success"
                            onClick={() => toggleSupplierStatus(supplier.id, 'activate')}
                            title="Reativar fornecedor"
                          >
                            <i className="fas fa-check"></i>
                          </button>
                        )}
                        <button 
                          className="btn btn-outline-danger"
                          onClick={() => {
                            if(window.confirm('Tem certeza que deseja EXCLUIR permanentemente este fornecedor?')) {
                              alert('Função de exclusão em desenvolvimento');
                            }
                          }}
                          title="Excluir fornecedor permanentemente"
                        >
                          <i className="fas fa-trash"></i>
                        </button>
                        {supplier.subscription_id && (
                          <button 
                            className="btn btn-outline-info"
                            onClick={() => generateNFe(supplier.subscription_id)}
                            title="Gerar NFe de Serviço via Bling"
                          >
                            <i className="fas fa-file-invoice"></i>
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  return (
    <div className="container-fluid py-4">
      {/* Header */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <h1 className="mb-1">🚀 Super Admin - HUB360PLUS</h1>
              <p className="text-muted mb-0">Cadastro e gestão completa de fornecedores - Controle total: criar, alterar, excluir e bloquear</p>
            </div>
            <div className="d-flex gap-2">
              <div className="badge bg-success fs-6">
                {metrics.revenue?.active_subscriptions || 0} assinaturas ativas
              </div>
              <div className="badge bg-info fs-6">
                Controle Exclusivo HUB360PLUS
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Navegação */}
      <div className="row mb-4">
        <div className="col-12">
          <ul className="nav nav-pills">
            <li className="nav-item">
              <button 
                className={`nav-link ${activeTab === 'dashboard' ? 'active' : ''}`}
                onClick={() => setActiveTab('dashboard')}
              >
                <i className="fas fa-tachometer-alt me-2"></i>
                Dashboard
              </button>
            </li>
            <li className="nav-item dropdown">
              <button 
                className={`nav-link dropdown-toggle ${activeTab === 'suppliers' || activeTab === 'retailers' ? 'active' : ''}`}
                type="button"
                id="clientesDropdown"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                <i className="fas fa-users me-2"></i>
                Clientes ({metrics.suppliers?.total || 0})
              </button>
              <ul className="dropdown-menu" aria-labelledby="clientesDropdown">
                <li>
                  <button 
                    className="dropdown-item"
                    onClick={() => setActiveTab('suppliers')}
                  >
                    <i className="fas fa-building me-2"></i>
                    Fornecedores
                  </button>
                </li>
                <li>
                  <button 
                    className="dropdown-item"
                    onClick={() => setActiveTab('retailers')}
                  >
                    <i className="fas fa-store me-2"></i>
                    Lojistas
                  </button>
                </li>
              </ul>
            </li>
            <li className="nav-item">
              <button 
                className={`nav-link ${activeTab === 'cadastro' ? 'active' : ''}`}
                onClick={() => setActiveTab('cadastro')}
              >
                <i className="fas fa-plus me-2"></i>
                Cadastrar Cliente
              </button>
            </li>
          </ul>
        </div>
      </div>

      {/* Conteúdo */}
      <div className="row">
        <div className="col-12">
          {activeTab === 'dashboard' && renderDashboard()}
          {activeTab === 'suppliers' && renderSuppliers()}
          {activeTab === 'retailers' && renderRetailers()}
          {activeTab === 'cadastro' && renderCadastroForm()}
        </div>
      </div>
    </div>
  );
};

export default SuperAdmin;