const { body, param, validationResult } = require('express-validator');
const DomainService = require('../services/DomainService');

class DomainController {
  constructor() {
    this.domainService = new DomainService();
  }

  /**
   * Setup completo de um novo dom√≠nio
   * POST /api/tenants/:tenantId/domains
   */
  async setupDomain(req, res) {
    try {
      // Valida√ß√£o
      await this.validateSetupDomain(req);
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          errors: errors.array()
        });
      }

      const { tenantId } = req.params;
      const { domain } = req.body;

      console.log(`üöÄ API: Setup dom√≠nio ${domain} para tenant ${tenantId}`);

      const result = await this.domainService.setupDomain(tenantId, domain);
      
      res.status(201).json({
        success: true,
        message: 'Dom√≠nio configurado com sucesso',
        data: result
      });
      
    } catch (error) {
      console.error('‚ùå Erro no setup do dom√≠nio:', error);
      res.status(500).json({
        success: false,
        message: error.message,
        error: process.env.NODE_ENV === 'development' ? error.stack : undefined
      });
    }
  }

  /**
   * Remove um dom√≠nio
   * DELETE /api/tenants/:tenantId/domains/:domain
   */
  async removeDomain(req, res) {
    try {
      const { tenantId, domain } = req.params;

      console.log(`üóëÔ∏è API: Removendo dom√≠nio ${domain} do tenant ${tenantId}`);

      const result = await this.domainService.removeDomain(tenantId, domain);
      
      res.json({
        success: true,
        message: 'Dom√≠nio removido com sucesso',
        data: result
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao remover dom√≠nio:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * Status de um dom√≠nio espec√≠fico
   * GET /api/domains/:domain/status
   */
  async getDomainStatus(req, res) {
    try {
      const { domain } = req.params;

      console.log(`üîç API: Status do dom√≠nio ${domain}`);

      const status = await this.domainService.getDomainStatus(domain);
      
      res.json({
        success: true,
        data: status
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar status:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * Health check de todos os dom√≠nios
   * GET /api/domains/health-check
   */
  async healthCheckAllDomains(req, res) {
    try {
      console.log('üè• API: Health check de todos os dom√≠nios');

      const healthCheck = await this.domainService.healthCheckAllDomains();
      
      res.json({
        success: true,
        message: 'Health check conclu√≠do',
        data: healthCheck
      });
      
    } catch (error) {
      console.error('‚ùå Erro no health check:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * Renova SSL de todos os dom√≠nios
   * POST /api/domains/renew-ssl
   */
  async renewAllSSL(req, res) {
    try {
      console.log('üîí API: Renova√ß√£o SSL de todos os dom√≠nios');

      const result = await this.domainService.renewAllSSL();
      
      res.json({
        success: true,
        message: 'Renova√ß√£o SSL iniciada',
        data: result
      });
      
    } catch (error) {
      console.error('‚ùå Erro na renova√ß√£o SSL:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * Webhook do Cloudflare para notifica√ß√µes
   * POST /api/domains/webhook/cloudflare
   */
  async cloudflareWebhook(req, res) {
    try {
      console.log('üîó Webhook Cloudflare recebido:', req.body);

      // Implementar l√≥gica do webhook depois
      // Por exemplo: notifica√ß√£o de mudan√ßa de DNS, SSL renovado, etc.
      
      res.json({
        success: true,
        message: 'Webhook processado com sucesso'
      });
      
    } catch (error) {
      console.error('‚ùå Erro no webhook:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * Valida√ß√µes para setup de dom√≠nio
   */
  async validateSetupDomain(req) {
    return Promise.all([
      param('tenantId')
        .isInt({ min: 1 })
        .withMessage('ID do tenant deve ser um n√∫mero v√°lido')
        .run(req),
        
      body('domain')
        .notEmpty()
        .withMessage('Dom√≠nio √© obrigat√≥rio')
        .matches(/^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/)
        .withMessage('Formato de dom√≠nio inv√°lido')
        .isLength({ max: 253 })
        .withMessage('Dom√≠nio muito longo (m√°ximo 253 caracteres)')
        .run(req)
    ]);
  }

  /**
   * Middleware para require admin permissions
   */
  requireAdmin(req, res, next) {
    // Implementar verifica√ß√£o de permiss√£o de admin
    // Por enquanto, permitir tudo
    next();
  }

  /**
   * Middleware para rate limiting espec√≠fico de dom√≠nios
   */
  domainRateLimit(req, res, next) {
    // Implementar rate limiting espec√≠fico
    // M√°ximo 5 setup/remove por minuto por IP
    next();
  }
}

module.exports = new DomainController();